package cld.company;

import java.util.Arrays;
import java.util.Locale;

import javax.crypto.MacSpi;
import javax.swing.text.AbstractDocument.LeafElement;

public class Strin {
	
    public static void main(String[] args) {
    	char value1[]={'a','b','c' };
    	char value2[]={'d','f','g','h'  };
    	
    	Strin s1 = new Strin(value1);
    	Strin s2 = new Strin(value2);

    
    	s1.swap(s2);
    		
	}

	private char[] value;

		
	public Strin(char value[]) {
        this.value = Arrays.copyOf(value, value.length);
    }
	
    public Strin(char value[], int offset, int count) {
        if (offset < 0) {
            throw new StringIndexOutOfBoundsException(offset);
        }
        if (count < 0) {
            throw new StringIndexOutOfBoundsException(count);
        }
        // Note: offset or count might be near -1>>>1.
        if (offset > value.length - count) {
            throw new StringIndexOutOfBoundsException(offset + count);
        }
        this.value = Arrays.copyOfRange(value, offset, offset+count);
    }
	public int length() {
        return value.length;
    }
	
	
	public Strin substring(int beginIndex, int endIndex) {
        if (beginIndex < 0) {
            throw new StringIndexOutOfBoundsException(beginIndex);
        }
        if (endIndex > value.length) {
            throw new StringIndexOutOfBoundsException(endIndex);
        }
        int subLen = endIndex - beginIndex;
        if (subLen < 0) {
            throw new StringIndexOutOfBoundsException(subLen);
        }
        return ((beginIndex == 0) && (endIndex == value.length)) ? this : new Strin(value, beginIndex, subLen);
    }
	
	
	public Strin toUpperCase() {
        for(int i=0; i<length(); i++) {
        	if(value[i] >= 97 && value[i] <=122){
        		value[i] -= 32;
        	}
        }
        return this;
    }
	
	
	public Strin toLowerCase() {
		for(int i=0; i<length(); i++) {
        	if(value[i] >= 65 && value[i] <=90){
        		value[i] += 32;
        	}
        }
        return this;
        
    }
	
	public Strin concat(Strin str) {
		char[] temp = new char[length() + str.length()];
		
		for(int i = 0; i < length(); i++) {
			temp[i]=value[i];
		}
		
		for(int i = length(), j = 0; j < str.length(); i++, j++) {
			temp[i]=str.value[j];
		}
		
		return new Strin(temp);
    }
	
	
	
	
	public void swap(Strin other){
		char[] temp = this.value;
	    this.value = other.value;
	    other.value = temp;
	}
}
